import numpy as np
import pandas as pd
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from datetime import datetime, timedelta

# Step 1: Download historical data
data = yf.download('AAPL', start='2020-01-01', end='2023-10-01')
data = data[['Close']]

# Step 2: Preprocess the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Step 3: Create sequences
def create_sequences(data, time_step=60):
    X = []
    for i in range(len(data) - time_step):
        X.append(data[i:(i + time_step), 0])
    return np.array(X)

time_step = 60
X = create_sequences(scaled_data, time_step)
X = X.reshape(X.shape[0], X.shape[1], 1)

# Step 4: Build and train the LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(time_step, 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X, scaled_data[time_step:], epochs=20, batch_size=32)

# Step 5: Predict future prices
def predict_future_prices(model, last_sequence, future_days):
    predictions = []
    current_sequence = last_sequence

    for _ in range(future_days):
        # Predict the next day's price
        next_price = model.predict(current_sequence.reshape(1, time_step, 1))
        predictions.append(next_price[0, 0])

        # Update the sequence with the predicted price
        current_sequence = np.roll(current_sequence, -1)
        current_sequence[-1] = next_price

    return scaler.inverse_transform(np.array(predictions).reshape(-1, 1))

# Get the last sequence from the training data
last_sequence = scaled_data[-time_step:]

# Calculate the number of days until 26-02-2025
target_date = datetime(2025, 2, 26)
current_date = datetime(2023, 10, 1)
future_days = (target_date - current_date).days

# Predict future prices
future_prices = predict_future_prices(model, last_sequence, future_days)

# Step 6: Get the predicted price for 26-02-2025
predicted_price = future_prices[-1][0]
print(f"Predicted stock price for 26-02-2025: {predicted_price:.2f}")
